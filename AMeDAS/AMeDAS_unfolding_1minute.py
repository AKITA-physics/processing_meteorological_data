#####################################################################
# バイナリ形式のAMeDASの1分値地上データを展開するプログラム
#####################################################################
import pandas as pd
import struct
import os 

################## パラメータ ##################
year = 2014 # 処理する年
original_folder_path = "元データの入っているフォルダーパス"
output_folder_path = "出力先のフォルダーパス"

################## 月の日数を返す関数 ##################
def month_day(month, year):
    if month in [1,3,5,7,8,10,12]:
        return 31
    elif month in [4,6,9,11]:
        return 30
    elif month in [2]:
        if year % 4 == 0:
            return 29
        else:
            return 28

################## バイナリデータを読み込む関数 ##################
def read_binary_data(filepath):
    """
    バイナリデータを解析する関数

    Args:
        filepath (str): ファイルパス

    Returns:
        list: 解析結果のリスト
    """
    # B: 1バイト（8ビット）符号なし整数
    # H: 2バイト（16ビット）符号なし整数
    # I: 4バイト（32ビット）符号なし整数
    # Q: 8バイト（64ビット）符号なし整数
    
    # レコード構造を定義 (タプルで表現)
    record_format = [
        # 地点情報
        ('機関番号', 'H'),
        ('府県番号', 'H'),
        ('観測所番号', 'I'),
        ('観測所種別', 'H'),
        ('緯度', 'I'),
        ('経度', 'I'),
        ('標高', 'H'),
        ('雨量計地上の高さ', 'H'),
        ('風向風速計の高さ', 'H'),
        ('温度計地上の高さ', 'H'),
        ('日照計地上の高さ', 'H'),
        ('全天日射計地上の高さ', 'H'),
        ('気圧計の高さ', 'H'),
        ('視程計地上の高さ', 'H'),
        ('予備', 'H'),
        ('予備', 'H'),
        ('予備', 'H'),
        ('年', 'H'),
        ('月', 'H'),
        ('日', 'H'),
        ('時', 'H'),
        ('分', 'H'),
        # 雨
        ('予備', 'B'),
        ('降水積算カウンタ', 'I'),
        ('前1分間降水量', 'I'),
        ('利用フラグ_前1分間降水量', 'B'),
        ('予備', 'B'),
        ('降水強度', 'I'),
        ('利用フラグ_降水強度', 'B'),
        ('予備', 'B'),
        ('最大降水強度', 'I'),
        ('利用フラグ_最大降水強度', 'B'),
        ('予備', 'B'),
        ('降水の有無', 'I'),
        ('利用フラグ_降水の有無', 'B'),
        ('予備', 'B'),
        ('降水種別', 'I'),
        ('利用フラグ_降水種別', 'B'),
        ('予備', 'B'),
        # 風
        ('予備', 'B'),
        ('CW風向の最大値', 'I'),
        ('利用フラグ_CW風向の最大値', 'B'),
        ('予備', 'B'),
        ('CCW風向の最大値', 'I'),
        ('利用フラグ_CCW風向の最大値', 'B'),
        ('予備', 'B'),
        ('最大瞬間風速(3秒移動平均)', 'I'),
        ('利用フラグ_最大瞬間風速(3秒移動平均)', 'B'),
        ('予備', 'B'),
        ('最大瞬間風速(3秒移動平均)時の風向(16方位)', 'I'),
        ('最大瞬間風速(3秒移動平均)時の風向(36方位)', 'I'),
        ('最小瞬間風速(3秒移動平均)', 'I'),
        ('利用フラグ_最小瞬間風速(3秒移動平均)', 'B'),
        ('予備', 'B'),
        ('平均風向(前10分間のベクトル平均)(16方位)', 'I'),
        ('利用フラグ_平均風向(前10分間のベクトル平均)(16方位)', 'B'),
        ('予備', 'B'),
        ('平均風向(前10分間のベクトル平均)(36方位)', 'I'),
        ('利用フラグ_平均風向(前10分間のベクトル平均)(36方位)', 'B'),
        ('予備', 'B'),
        ('風程', 'I'),
        ('利用フラグ_風程', 'B'),
        ('予備', 'B'),
        ('風程有効データ数', 'I'),
        ('平均風速(10分移動平均)', 'I'),
        ('利用フラグ_平均風速(10分移動平均)', 'B'),
        ('予備', 'B'),
        # 気温
        ('予備', 'B'),
        ('瞬間気温(1分移動平均)', 'I'),
        ('利用フラグ_瞬間気温(1分移動平均)', 'B'),
        ('予備', 'B'),
        ('最高気温(1分移動平均)', 'I'),
        ('利用フラグ_最高気温(1分移動平均)', 'B'),
        ('予備', 'B'),
        ('最低気温(1分移動平均)', 'I'),
        ('利用フラグ_最低気温(1分移動平均)', 'B'),
        ('予備', 'B'),
        # 日照
        ('予備', 'B'),
        ('日照積算カウンタ', 'I'),
        ('日照時間', 'I'),
        ('利用フラグ_日照時間', 'B'),
        ('予備', 'B'),
        # 日射量
        ('予備', 'B'),
        ('直達日射量', 'I'),
        ('利用フラグ_直達日射量', 'B'),
        ('予備', 'B'),
        ('全天日射量', 'I'),
        ('利用フラグ_全天日射量', 'B'),
        ('予備', 'B'),
        # 積算
        ('予備', 'B'),
        ('積雪深', 'I'),
        ('利用フラグ_積雪深', 'B'),
        ('予備', 'B'),
        # 気圧
        ('予備', 'B'),
        ('重力加速度', 'H'),
        ('現地気圧(1分移動平均)', 'I'),
        ('利用フラグ_現地気圧(1分移動平均)', 'B'),
        ('予備', 'B'),
        ('海面気圧', 'I'),
        ('利用フラグ_海面気圧', 'B'),
        ('予備', 'B'),
        ('最低海面気圧', 'I'),
        ('利用フラグ_最低海面気圧', 'B'),
        ('予備', 'B'),
        # 湿度
        ('予備', 'B'),
        ('瞬間湿度(1分移動平均)', 'I'),
        ('利用フラグ_瞬間湿度(1分移動平均)', 'B'),
        ('予備', 'B'),
        ('最低湿度', 'I'),
        ('利用フラグ_最低湿度', 'B'),
        ('予備', 'B'),
        ('瞬間蒸気圧', 'I'),
        ('利用フラグ_瞬間蒸気圧', 'B'),
        ('予備', 'B'),
        ('露点温度', 'I'),
        ('利用フラグ_露点温度', 'B'),
        ('予備', 'B'),
        # 視程
        ('予備', 'B'),
        ('視程(10分平均)', 'I'),
        ('利用フラグ_視程(10分平均)', 'B'),
        ('予備', 'B'),
        ('現在天気', 'I'),
        ('利用フラグ_現在天気', 'B'),
        ('予備', 'B')
    ]

    # フォーマット文字列を作成
    fmt = '<' + ''.join(fmt for _, fmt in record_format)

    # ファイルを開く
    with open(filepath, 'rb') as f:
        data = f.read()

    # レコードごとに解析
    records = []
    for i in range(0, len(data), struct.calcsize(fmt)):
        record = struct.unpack_from(fmt, data, i)
        # レコード構造に合わせて辞書に変換
        record_dict = dict(zip([name for name, _ in record_format], record))
        records.append(record_dict)

    return records



list_block_no = os.listdir(original_folder_path)

for block_no in list_block_no:
    df_year = pd.DataFrame()

    for month in range(1,12+1):
        df_month = pd.DataFrame()
        month_str = str(month).zfill(2)
        end_day = month_day(month, year)
        
        for day in range(1, end_day+1):
            day_str = str(day).zfill(2)
            
            # ファイルパスを指定
            folder_path = f"{original_folder_path}\\{block_no}\\{year}\\{month_str}\\"
            filename = f"sfc_1min_{year}{month_str}{day_str}.{block_no}"

            # 関数を呼び出して結果を取得
            results = read_binary_data(folder_path+filename)

            # 結果をデータフレームに変換
            df_month = pd.concat([df_month, pd.DataFrame(results)], axis=0, ignore_index=True)
        print(df_month)
        df_year = pd.concat([df_year, df_month], axis=0, ignore_index=True)

    output_path = os.path.join(output_folder_path, f'original_surface_{year}_{block_no}.pkl')
    df_year.to_pickle(output_path)